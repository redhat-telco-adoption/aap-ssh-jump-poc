---
# Ansible Inventory for AAP 2.5 Growth Topology
# Generated by Terraform on ${timestamp()}

all:
  children:
    # Administrative Infrastructure
    bastion:
      hosts:
        ${name_prefix}-bastion:
          ansible_host: ${bastion_public_ip}
          ansible_user: ec2-user
          ansible_ssh_private_key_file: ${ops_key_path}
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
          private_ip: ${bastion_private_ip}
          role: bastion
          network_access: public
          
    # AAP Infrastructure 
    aap_infrastructure:
      children:
        aap_hosts:
          hosts:
            ${name_prefix}-aap:
              ansible_host: ${aap_private_ip}
              ansible_user: ec2-user
              ansible_ssh_private_key_file: ${aap_key_path}
              ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@${bastion_public_ip}'
              ansible_ssh_proxy_command: 'ssh -i ${ops_key_path} -W %h:%p -o StrictHostKeyChecking=no ec2-user@${bastion_public_ip}'
              public_fqdn: ${aap_fqdn}
              role: aap-controller
              network_access: private
              subnet_type: aap
              
        execution_nodes:
          hosts:
            ${name_prefix}-exec:
              ansible_host: ${exec_private_ip}
              ansible_user: ec2-user
              ansible_ssh_private_key_file: ${aap_key_path}
              ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@${bastion_public_ip}'
              ansible_ssh_proxy_command: 'ssh -i ${ops_key_path} -W %h:%p -o StrictHostKeyChecking=no ec2-user@${bastion_public_ip}'
              role: execution-node
              network_access: private
              subnet_type: aap
              
    # Jump Infrastructure
    jump_hosts:
      hosts:
        ${name_prefix}-jump:
          ansible_host: ${jump_aap_ip}
          ansible_user: ec2-user
          ansible_ssh_private_key_file: ${ops_key_path}
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@${bastion_public_ip}'
          ansible_ssh_proxy_command: 'ssh -i ${ops_key_path} -W %h:%p -o StrictHostKeyChecking=no ec2-user@${bastion_public_ip}'
          aap_interface_ip: ${jump_aap_ip}
          managed_interface_ip: ${jump_managed_ip}
          role: jump-host
          network_access: private
          subnet_type: dual
          
    # Managed Infrastructure
    managed_nodes:
      hosts:
%{ for node in managed_nodes ~}
        ${node.name}:
          ansible_host: ${node.ip}
          ansible_user: ec2-user
          ansible_ssh_private_key_file: ${ops_key_path}
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@${jump_aap_ip}'
          ansible_ssh_proxy_command: 'ssh -i ${ops_key_path} -W %h:%p -o StrictHostKeyChecking=no ec2-user@${jump_aap_ip}'
          role: managed-node
          network_access: private
          subnet_type: managed
%{ endfor ~}
          
  vars:
    # Global variables
    ansible_python_interpreter: /usr/bin/python3
    
    # Network Configuration
    vpc_cidr: ${vpc_cidr}
    aap_subnet_cidrs: ${jsonencode(aap_subnet_cidrs)}
    managed_subnet_cidrs: ${jsonencode(managed_subnet_cidrs)}
    
    # AAP Configuration
    aap_public_url: https://${aap_fqdn}
    aap_private_ip: ${aap_private_ip}
    
    # SSH Key Paths (absolute paths)
    aap_ssh_key: ${aap_key_path}
    ops_ssh_key: ${ops_key_path}
    
    # Connection Patterns
    # Administrative access: Admin -> Bastion -> AAP/Exec/Jump
    # Automation access: AAP -> Jump -> Managed Nodes
    
    # ProxyJump Configurations for different access patterns:
    # 1. Admin to AAP infrastructure: via Bastion
    # 2. AAP jobs to Managed nodes: via Jump host
    
# Group-specific variables
aap_infrastructure:
  vars:
    # These hosts are accessible via bastion for administrative tasks
    proxy_host: ${bastion_public_ip}
    proxy_user: ec2-user
    proxy_key: ${ops_key_path}
    
managed_nodes:
  vars:
    # These hosts are accessible via jump host for automation
    proxy_host: ${jump_aap_ip}
    proxy_user: ec2-user 
    proxy_key: ${ops_key_path}
    # For AAP jobs, configure the jump host as ProxyJump in AAP inventory
    automation_proxy_jump: "ec2-user@${jump_aap_ip}"