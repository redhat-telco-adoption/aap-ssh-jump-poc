- name: Apply system updates
  hosts: all
  become: true
  vars:
    reboot_after_update: false
    update_timeout: 1800
    
  tasks:
    - name: Update package cache (RHEL/CentOS)
      ansible.builtin.yum:
        update_cache: true
      when: ansible_os_family == "RedHat"

    - name: Update package cache (Ubuntu/Debian)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Get list of available updates (RHEL/CentOS)
      ansible.builtin.yum:
        list: updates
      register: yum_updates
      when: ansible_os_family == "RedHat"

    - name: Display available updates (RHEL/CentOS)
      ansible.builtin.debug:
        msg: "{{ yum_updates.results | length }} updates available"
      when: ansible_os_family == "RedHat"

    - name: Apply all updates (RHEL/CentOS)
      ansible.builtin.yum:
        name: "*"
        state: latest
        update_only: true
      async: "{{ update_timeout }}"
      poll: 30
      register: yum_result
      when: ansible_os_family == "RedHat"

    - name: Apply all updates (Ubuntu/Debian)
      ansible.builtin.apt:
        upgrade: dist
        update_cache: true
        autoremove: true
        autoclean: true
      async: "{{ update_timeout }}"
      poll: 30
      register: apt_result
      when: ansible_os_family == "Debian"

    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Check for kernel updates (RHEL/CentOS)
      ansible.builtin.shell: |
        if [[ $(rpm -q kernel | tail -1) != $(uname -r) ]]; then
          echo "kernel_updated"
        fi
      register: kernel_check
      changed_when: false
      when: ansible_os_family == "RedHat"

    - name: Set reboot required fact
      ansible.builtin.set_fact:
        needs_reboot: "{{ reboot_required_file.stat.exists or (kernel_check is defined and 'kernel_updated' in kernel_check.stdout) }}"

    - name: Display update results
      ansible.builtin.debug:
        msg:
          - "Updates completed on {{ inventory_hostname }}"
          - "Reboot required: {{ 'Yes' if needs_reboot else 'No' }}"
          - "Reboot scheduled: {{ 'Yes' if (reboot_after_update and needs_reboot) else 'No' }}"

    - name: Reboot if required and requested
      ansible.builtin.reboot:
        reboot_timeout: 600
        test_command: uptime
      when: reboot_after_update and needs_reboot

    - name: Wait for system to be ready after reboot
      ansible.builtin.wait_for_connection:
        timeout: 300
      when: reboot_after_update and needs_reboot
