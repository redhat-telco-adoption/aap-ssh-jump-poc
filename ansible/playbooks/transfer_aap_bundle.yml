---
# Transfer AAP Installation Bundle and Inventory
# This playbook transfers the AAP installation files to the AAP host and distributes SSH keys
# Usage: ansible-playbook -i ../working/inventory/hosts.yml playbooks/transfer_aap_bundle.yml

- name: Distribute SSH keys to bastion host
  hosts: bastion
  gather_facts: false
  vars:
    local_aap_key: "../../working/keys/aap_key"
    local_ops_key: "../../working/keys/bastion_managed_key"
    
  tasks:
    - name: Create .ssh directory for ec2-user
      ansible.builtin.file:
        path: /home/ec2-user/.ssh
        state: directory
        mode: '0700'
        owner: ec2-user
        group: ec2-user
      become: true

    - name: Copy AAP SSH key to bastion
      ansible.builtin.copy:
        src: "{{ local_aap_key }}"
        dest: /home/ec2-user/.ssh/aap_key
        mode: '0600'
        owner: ec2-user
        group: ec2-user
      become: true

    - name: Copy ops SSH key to bastion
      ansible.builtin.copy:
        src: "{{ local_ops_key }}"
        dest: /home/ec2-user/.ssh/bastion_managed_key
        mode: '0600'
        owner: ec2-user
        group: ec2-user
      become: true

    - name: Display SSH key distribution status
      ansible.builtin.debug:
        msg:
          - "✅ SSH keys distributed to bastion host"
          - "  - /home/ec2-user/.ssh/aap_key (for AAP/Exec nodes)"
          - "  - /home/ec2-user/.ssh/bastion_managed_key (for Jump/Managed nodes)"

- name: Transfer AAP installation files to AAP host
  hosts: aap_hosts
  gather_facts: false
  vars:
    local_bundles_dir: "../../working/aap-install/bundles"
    local_inventory_file: "../../working/aap-install/aap_install_inventory"
    local_aap_key: "../../working/keys/aap_key"
    remote_install_dir: "/tmp/aap_install"
    
  tasks:
    - name: Create remote installation directory
      ansible.builtin.file:
        path: "{{ remote_install_dir }}"
        state: directory
        mode: '0755'
      become: true

    - name: Create .ssh directory for ec2-user on AAP host
      ansible.builtin.file:
        path: /home/ec2-user/.ssh
        state: directory
        mode: '0700'
        owner: ec2-user
        group: ec2-user
      become: true

    - name: Copy AAP SSH key to AAP host
      ansible.builtin.copy:
        src: "{{ local_aap_key }}"
        dest: /home/ec2-user/.ssh/id_rsa
        mode: '0600'
        owner: ec2-user
        group: ec2-user
      become: true

    - name: Generate SSH public key from private key
      ansible.builtin.shell: ssh-keygen -y -f /home/ec2-user/.ssh/id_rsa > /home/ec2-user/.ssh/id_rsa.pub
      become: true
      become_user: ec2-user

    - name: Set correct permissions on SSH public key
      ansible.builtin.file:
        path: /home/ec2-user/.ssh/id_rsa.pub
        mode: '0644'
        owner: ec2-user
        group: ec2-user
      become: true

    - name: Transfer AAP installation inventory
      ansible.builtin.copy:
        src: "{{ local_inventory_file }}"
        dest: "{{ remote_install_dir }}/aap_install_inventory"
        mode: '0600'
        backup: true
      become: true

    - name: Find AAP bundle file locally
      ansible.builtin.find:
        paths: "{{ local_bundles_dir }}"
        patterns: "ansible-automation-platform-*-setup-bundle-*.tar.gz"
      delegate_to: localhost
      register: aap_bundle_files

    - name: Fail if no AAP bundle found
      ansible.builtin.fail:
        msg: |
          No AAP bundle found in {{ local_bundles_dir }}
          Please download the AAP 2.5 setup bundle from Red Hat Customer Portal
          and place it in the working/aap-install/bundles/ directory.
      when: aap_bundle_files.files | length == 0

    - name: Display found bundle
      ansible.builtin.debug:
        msg: "Found AAP bundle: {{ aap_bundle_files.files[0].path }}"

    - name: Transfer AAP bundle
      ansible.builtin.copy:
        src: "{{ aap_bundle_files.files[0].path }}"
        dest: "{{ remote_install_dir }}/{{ aap_bundle_files.files[0].path | basename }}"
        mode: '0644'
      become: true
      register: bundle_transfer

    - name: Create installation script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # AAP Installation Script
          # Generated by Terraform - Updated with SSH key support
          
          set -e
          
          INSTALL_DIR="{{ remote_install_dir }}"
          BUNDLE_FILE="{{ aap_bundle_files.files[0].path | basename }}"
          
          echo "Starting AAP installation process..."
          echo "Working directory: $INSTALL_DIR"
          echo "Bundle file: $BUNDLE_FILE"
          echo "SSH keys: Available in /home/ec2-user/.ssh/"
          
          cd "$INSTALL_DIR"
          
          # Extract bundle
          echo "Extracting AAP bundle..."
          tar -xzf "$BUNDLE_FILE"
          
          # Find extracted directory
          EXTRACTED_DIR=$(find . -maxdepth 1 -name "ansible-automation-platform-setup-bundle-*" -type d | head -1)
          
          if [ -z "$EXTRACTED_DIR" ]; then
            echo "ERROR: Could not find extracted AAP directory"
            exit 1
          fi
          
          echo "Extracted to: $EXTRACTED_DIR"
          
          # Copy inventory file
          echo "Copying installation inventory..."
          cp aap_install_inventory "$EXTRACTED_DIR/inventory"
          
          # Make sure we have proper permissions
          chmod 644 "$EXTRACTED_DIR/inventory"
          
          # Verify SSH key exists for execution node access
          if [ -f "/home/ec2-user/.ssh/id_rsa" ]; then
            echo "✓ SSH private key available for execution node access"
          else
            echo "⚠ WARNING: SSH private key not found - execution node setup may fail"
          fi
          
          echo "Installation files prepared successfully!"
          echo ""
          echo "To complete AAP installation:"
          echo "  cd $INSTALL_DIR/$EXTRACTED_DIR"
          echo "  sudo ./setup.sh"
          echo ""
          echo "The installation will:"
          echo "  - Install AAP Controller on this host"
          echo "  - Configure execution node connectivity"
          echo "  - Set up SSL certificates"
          echo "  - Initialize the database"
          echo ""
          echo "After installation, access AAP at: https://{{ inventory_hostname }}"
          echo "Login with username: admin"
          echo "Default password is in the inventory file"
          
        dest: "{{ remote_install_dir }}/install_aap.sh"
        mode: '0755'
      become: true

    - name: Display installation instructions
      ansible.builtin.debug:
        msg:
          - "=== AAP Installation Files Transfer Complete ==="
          - ""
          - "Files transferred to: {{ remote_install_dir }}"
          - "  - aap_install_inventory (installation inventory)"
          - "  - {{ aap_bundle_files.files[0].path | basename }} (AAP bundle)"
          - "  - install_aap.sh (installation script)"
          - ""
          - "SSH Keys distributed:"
          - "  - /home/ec2-user/.ssh/id_rsa (for execution node access)"
          - "  - /home/ec2-user/.ssh/id_rsa.pub (public key)"
          - ""
          - "To complete AAP installation:"
          - "  1. SSH to AAP host: ssh -F ../working/inventory/ssh_config aap"
          - "  2. Run preparation script: sudo {{ remote_install_dir }}/install_aap.sh"
          - "  3. Navigate to extracted directory"
          - "  4. Run installer: sudo ./setup.sh"
          - ""
          - "The installer will automatically configure the execution node"
          - "using the distributed SSH keys."
          - ""
          - "AAP will be accessible at: https://{{ inventory_hostname }}"
          - "Default admin password is configured in the inventory file"

- name: Verify AAP host readiness
  hosts: aap_hosts
  gather_facts: true
  tasks:
    - name: Check system requirements
      ansible.builtin.debug:
        msg:
          - "=== AAP Host System Check ==="
          - "Hostname: {{ ansible_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Kernel: {{ ansible_kernel }}"
          - "CPU Cores: {{ ansible_processor_vcpus }}"
          - "Memory: {{ (ansible_memtotal_mb / 1024) | round(1) }} GB"
          - "Architecture: {{ ansible_architecture }}"
          - "Free Space: {{ (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available | human_readable }}"

    - name: Check if AAP is already installed
      ansible.builtin.stat:
        path: /opt/ansible-automation-platform
      register: aap_installed

    - name: Warning if AAP already installed
      ansible.builtin.debug:
        msg:
          - "WARNING: AAP appears to already be installed on this system"
          - "Installation directory exists: /opt/ansible-automation-platform"
          - "Please verify before proceeding with installation"
      when: aap_installed.stat.exists

    - name: Check execution node connectivity from AAP host
      ansible.builtin.wait_for:
        host: "{{ hostvars[groups['execution_nodes'][0]]['private_ip'] | default(hostvars[groups['execution_nodes'][0]]['ansible_host']) }}"
        port: 22
        timeout: 10
      register: exec_connectivity
      ignore_errors: true
      when: groups['execution_nodes'] is defined and groups['execution_nodes'] | length > 0

    - name: Test SSH connectivity to execution node
      ansible.builtin.shell: |
        exec_host="{{ hostvars[groups['execution_nodes'][0]]['private_ip'] | default(hostvars[groups['execution_nodes'][0]]['ansible_host']) }}"
        ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i /home/ec2-user/.ssh/id_rsa ec2-user@$exec_host "echo 'SSH connection successful'"
      register: ssh_test
      ignore_errors: true
      become: true
      become_user: ec2-user
      when: groups['execution_nodes'] is defined and groups['execution_nodes'] | length > 0

    - name: Display execution node status
      ansible.builtin.debug:
        msg: 
          - "Execution node connectivity:"
          - "  Port 22: {{ 'Reachable' if exec_connectivity is succeeded else 'Not reachable' }}"
          - "  SSH access: {{ 'Working' if ssh_test is succeeded else 'Failed' }}"
          - "  Target: {{ hostvars[groups['execution_nodes'][0]]['private_ip'] | default(hostvars[groups['execution_nodes'][0]]['ansible_host']) }}"
      when: groups['execution_nodes'] is defined and groups['execution_nodes'] | length > 0