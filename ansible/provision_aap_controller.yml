---
# AAP Controller Provisioning Playbook - Updated for Jump Host POC
# This playbook configures AAP Controller for the SSH jump host POC environment
# 
# Usage:
#   ansible-playbook -i working/inventory/hosts.yml ansible/provision_aap_controller.yml

- name: Provision AAP Controller for SSH Jump Host POC
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../working/aap-install/aap_controller_vars.yml
  
  vars:
    # Connection settings
    controller_host: "{{ aap_public_url }}"
    controller_username: "{{ aap_admin_user }}"
    controller_password: "{{ aap_admin_password }}"
    controller_verify_ssl: "{{ aap_verify_ssl }}"

  tasks:
    - name: Configure AAP Controller
      block:
        - name: Display configuration summary
          ansible.builtin.debug:
            msg:
              - "=== AAP Controller POC Configuration ==="
              - "Controller: {{ controller_host }}"
              - "Organization: {{ organization_name }}"
              - "Project: {{ project_name }}"
              - "Repository: {{ project_scm_url }}"
              - "SSH Jump Host: {{ jump_host_ip }}"
              - "Managed Hosts: {{ managed_hosts | length }}"

        - name: Test AAP Controller connectivity
          ansible.builtin.uri:
            url: "{{ controller_host }}/api/v2/ping/"
            validate_certs: "{{ controller_verify_ssl }}"
            timeout: 10
          register: ping_result

        - name: Verify controller is accessible
          ansible.builtin.assert:
            that:
              - ping_result.status == 200
            fail_msg: "Cannot connect to AAP Controller at {{ controller_host }}"

        # ===========================================
        # SSH CREDENTIALS
        # ===========================================
        
        - name: Check if SSH key file exists
          ansible.builtin.stat:
            path: "./working/keys/bastion_managed_key"
          register: ssh_key_stat

        - name: Create SSH credential for managed nodes with jump host
          ansible.controller.credential:
            name: "{{ ssh_credential_name }}"
            description: "SSH key for managed nodes via jump host"
            organization: "{{ organization_name }}"
            credential_type: "Machine"
            inputs:
              username: "{{ ssh_username }}"
              ssh_key_data: "{{ lookup('file', './working/keys/bastion_managed_key') }}"
              ssh_key_unlock: ""
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
            state: present
          when: ssh_key_stat.stat.exists

        # ===========================================
        # EXECUTION ENVIRONMENT
        # ===========================================
        
        - name: Create execution environment
          ansible.controller.execution_environment:
            name: "{{ execution_environment.name }}"
            description: "{{ execution_environment.description }}"
            image: "{{ execution_environment.image }}"
            pull: "{{ execution_environment.pull }}"
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
            state: present

        # ===========================================
        # PROJECT (Actual GitHub Repository)
        # ===========================================
        
        - name: Create project for SSH Jump POC
          ansible.controller.project:
            name: "{{ project_name }}"
            description: "AAP SSH Jump Host POC playbooks and configurations"
            organization: "{{ organization_name }}"
            scm_type: "git"
            scm_url: "{{ project_scm_url }}"
            scm_branch: "{{ project_scm_branch }}"
            scm_clean: true
            scm_update_on_launch: true
            timeout: 600
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
            state: present

        # ===========================================
        # INVENTORY
        # ===========================================
        
        - name: Create managed infrastructure inventory
          ansible.controller.inventory:
            name: "{{ inventory_name }}"
            description: "{{ inventory_description }}"
            organization: "{{ organization_name }}"
            variables: "{{ inventory_variables }}"
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
            state: present

        - name: Create managed nodes group
          ansible.controller.group:
            name: "{{ group_name }}"
            description: "{{ group_description }}"
            inventory: "{{ inventory_name }}"
            variables:
              ansible_user: "{{ ssh_username }}"
              environment: "{{ inventory_variables.environment }}"
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
            state: present

        # Add managed hosts dynamically from terraform-generated data
        - name: Add managed hosts to inventory
          ansible.controller.host:
            name: "{{ item.name }}"
            description: "Managed node {{ item.name }}"
            inventory: "{{ inventory_name }}"
            variables:
              ansible_host: "{{ item.ansible_host }}"
              ansible_user: "{{ ssh_username }}"
              ansible_ssh_common_args: "{{ inventory_variables.ansible_ssh_common_args }} -o ProxyJump={{ ssh_username }}@{{ jump_host_ip }}"
              private_ip: "{{ item.private_ip }}"
            groups: ["{{ group_name }}"]
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
            state: present
          loop: "{{ managed_hosts }}"

        # ===========================================
        # JOB TEMPLATES
        # ===========================================
        
        - name: Create job templates
          ansible.controller.job_template:
            name: "{{ item.name }}"
            description: "{{ item.description }}"
            organization: "{{ organization_name }}"
            project: "{{ project_name }}"
            playbook: "{{ item.playbook }}"
            inventory: "{{ inventory_name }}"
            credentials: ["{{ ssh_credential_name }}"]
            execution_environment: "{{ execution_environment.name }}"
            job_type: "run"
            verbosity: "{{ item.verbosity }}"
            timeout: "{{ item.timeout }}"
            become_enabled: false
            allow_simultaneous: true
            ask_limit_on_launch: true
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
            state: present
          loop: "{{ job_templates }}"

        # ===========================================
        # VALIDATION
        # ===========================================
        
        - name: Wait for project sync
          ansible.controller.project:
            name: "{{ project_name }}"
            wait: true
            timeout: 300
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"

        - name: Test connectivity job template (validation)
          ansible.controller.job_launch:
            job_template: "Ping All Managed Nodes"
            limit: "{{ managed_hosts[0].name }}"
            wait: false
            controller_host: "{{ controller_host }}"
            controller_username: "{{ controller_username }}"
            controller_password: "{{ controller_password }}"
            validate_certs: "{{ controller_verify_ssl }}"
          register: validation_job
          ignore_errors: true

        - name: Display setup completion
          ansible.builtin.debug:
            msg:
              - "=== AAP Controller Setup Complete ==="
              - ""
              - "âœ… SSH Credential: {{ ssh_credential_name }}"
              - "âœ… Execution Environment: {{ execution_environment.name }}"
              - "âœ… Project: {{ project_name }}"
              - "âœ… Repository: {{ project_scm_url }}"
              - "âœ… Inventory: {{ inventory_name }} ({{ managed_hosts | length }} hosts)"
              - "âœ… Group: {{ group_name }}"
              - "âœ… Job Templates: {{ job_templates | length }} templates created"
              - ""
              - "ðŸŽ¯ Ready for Testing:"
              - "1. Login to {{ controller_host }}"
              - "2. Navigate to Resources â†’ Templates"
              - "3. Run 'Ping All Managed Nodes'"
              - "4. Run 'System Information'"
              - ""
              - "ðŸ’¡ Jump Host Configuration:"
              - "- All managed nodes use ProxyJump via {{ jump_host_ip }}"
              - "- SSH key: {{ ssh_credential_name }}"
              - "- Playbooks from: {{ project_scm_url }}"
              - ""
              - "ðŸ“‹ Created Job Templates:"
              - "{% for template in job_templates -%}"
              - "  - {{ template.name }}: {{ template.playbook }}"
              - "{% endfor %}"

      rescue:
        - name: Display error information
          ansible.builtin.debug:
            msg:
              - "=== AAP Controller Setup Failed ==="
              - "Error occurred during configuration."
              - ""
              - "Quick troubleshooting:"
              - "1. Verify AAP is running: curl -k {{ controller_host }}/api/v2/ping/"
              - "2. Check credentials: {{ aap_admin_user }} / [password]"
              - "3. Ensure SSH key exists: ls -la working/keys/bastion_managed_key"
              - "4. Test manual login to AAP web interface"
              - "5. Check project sync in AAP UI: Resources â†’ Projects"
              - ""
              - "Variables file: working/aap-install/aap_controller_vars.yml"

        - name: Fail with error message
          ansible.builtin.fail:
            msg: "AAP Controller provisioning failed. See troubleshooting steps above."