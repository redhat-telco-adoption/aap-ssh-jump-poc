---
# AAP Controller Provisioning Playbook
# This playbook provides essential AAP Controller configuration
# 
# Usage:
#   ansible-playbook provision_aap_controller.yml -e @vars/aap_controller_vars.yml

- name: Provision AAP Controller Configuration - POC Simplified
  hosts: localhost
  gather_facts: false
  vars:
    # Connection settings with sensible defaults
    controller_host: "{{ aap_public_url | default('https://localhost') }}"
    controller_username: "{{ aap_admin_user | default('admin') }}"
    controller_password: "{{ aap_admin_password | default('changeme') }}"
    controller_verify_ssl: "{{ aap_verify_ssl | default(false) }}"
    
    # Use Default organization for simplicity
    organization_name: "Default"

  tasks:
    - name: Display configuration summary
      ansible.builtin.debug:
        msg:
          - "=== AAP Controller POC Configuration ==="
          - "Controller: {{ controller_host }}"
          - "Organization: {{ organization_name }}"
          - "SSL Verification: {{ controller_verify_ssl }}"
          - "Mode: POC Simplified"

    - name: Test AAP Controller connectivity
      ansible.builtin.uri:
        url: "{{ controller_host }}/api/v2/ping/"
        validate_certs: "{{ controller_verify_ssl }}"
        timeout: 10
      register: ping_result

    - name: Verify controller is accessible
      ansible.builtin.assert:
        that:
          - ping_result.status == 200
        fail_msg: "Cannot connect to AAP Controller at {{ controller_host }}"

    # ===========================================
    # ESSENTIAL CREDENTIALS
    # ===========================================
    
    - name: Check if SSH key file exists
      ansible.builtin.stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_stat
      vars:
        ssh_key_path: "./keys/bastion_managed_key"

    - name: Create SSH credential for managed nodes
      ansible.controller.credential:
        name: "Managed Nodes SSH Key"
        description: "SSH key for accessing managed nodes via jump host"
        organization: "{{ organization_name }}"
        credential_type: "Machine"
        inputs:
          username: "ec2-user"
          ssh_key_data: "{{ lookup('file', './keys/bastion_managed_key') }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      when: ssh_key_stat.stat.exists

    # ===========================================
    # EXECUTION ENVIRONMENT
    # ===========================================
    
    - name: Create basic execution environment
      ansible.controller.execution_environment:
        name: "Default EE"
        description: "Default execution environment for POC"
        image: "quay.io/ansible/automation-hub-ee:latest"
        pull: "missing"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    # ===========================================
    # SIMPLE PROJECT
    # ===========================================
    
    - name: Create demo project
      ansible.controller.project:
        name: "Demo Playbooks"
        description: "Sample playbooks for POC testing"
        organization: "{{ organization_name }}"
        scm_type: "git"
        scm_url: "https://github.com/ansible/ansible-examples.git"
        scm_branch: "master"
        scm_clean: true
        scm_update_on_launch: true
        timeout: 600
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    # ===========================================
    # SIMPLE INVENTORY
    # ===========================================
    
    - name: Create managed infrastructure inventory
      ansible.controller.inventory:
        name: "Managed Infrastructure"
        description: "POC managed nodes accessible via jump host"
        organization: "{{ organization_name }}"
        variables:
          ansible_python_interpreter: "/usr/bin/python3"
          ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    - name: Create managed nodes group
      ansible.controller.group:
        name: "managed_environment"
        description: "All managed nodes for POC"
        inventory: "Managed Infrastructure"
        variables:
          environment: "poc"
          node_type: "managed"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    # Add hosts dynamically from the generated inventory
    - name: Add managed-node-0
      ansible.controller.host:
        name: "managed-node-0"
        description: "First managed node"
        inventory: "Managed Infrastructure"
        variables:
          ansible_host: "{{ managed_node_0_ip | default('10.50.20.11') }}"
          ansible_user: "ec2-user"
          ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@{{ jump_host_ip | default('10.50.10.10') }}"
        groups: ["managed_environment"]
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    - name: Add managed-node-1
      ansible.controller.host:
        name: "managed-node-1"
        description: "Second managed node"
        inventory: "Managed Infrastructure"
        variables:
          ansible_host: "{{ managed_node_1_ip | default('10.50.20.12') }}"
          ansible_user: "ec2-user"
          ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@{{ jump_host_ip | default('10.50.10.10') }}"
        groups: ["managed_environment"]
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    # ===========================================
    # ESSENTIAL JOB TEMPLATES
    # ===========================================
    
    - name: Create ping job template
      ansible.controller.job_template:
        name: "Ping All Managed Nodes"
        description: "Test connectivity to all managed nodes"
        organization: "{{ organization_name }}"
        project: "Demo Playbooks"
        playbook: "lamp_simple/roles/common/tasks/main.yml"  # Simple ping equivalent
        inventory: "Managed Infrastructure"
        credentials: ["Managed Nodes SSH Key"]
        execution_environment: "Default EE"
        job_type: "run"
        verbosity: 1
        timeout: 300
        become_enabled: false
        allow_simultaneous: true
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    - name: Create system info job template
      ansible.controller.job_template:
        name: "System Information"
        description: "Gather basic system information from managed nodes"
        organization: "{{ organization_name }}"
        project: "Demo Playbooks"
        playbook: "lamp_simple/site.yml"
        inventory: "Managed Infrastructure"
        credentials: ["Managed Nodes SSH Key"]
        execution_environment: "Default EE"
        job_type: "run"
        verbosity: 1
        timeout: 600
        become_enabled: false
        ask_limit_on_launch: true
        extra_vars:
          gather_facts: true
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    - name: Create ad-hoc command template
      ansible.controller.job_template:
        name: "Run Ad-hoc Commands"
        description: "Run simple commands on managed nodes"
        organization: "{{ organization_name }}"
        project: "Demo Playbooks"
        playbook: "lamp_simple/roles/common/tasks/main.yml"
        inventory: "Managed Infrastructure"
        credentials: ["Managed Nodes SSH Key"]
        execution_environment: "Default EE"
        job_type: "run"
        verbosity: 2
        timeout: 300
        become_enabled: true
        ask_limit_on_launch: true
        ask_variables_on_launch: true
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present

    # ===========================================
    # VALIDATION
    # ===========================================
    
    - name: Wait for project sync
      ansible.controller.project:
        name: "Demo Playbooks"
        wait: true
        timeout: 300
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"

    - name: Test ping job template (optional validation)
      ansible.controller.job_launch:
        job_template: "Ping All Managed Nodes"
        wait: false
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
      register: validation_job
      ignore_errors: true

    - name: Display setup completion
      ansible.builtin.debug:
        msg:
          - "=== AAP Controller Setup Complete ==="
          - ""
          - "✅ Credentials: Managed Nodes SSH Key"
          - "✅ Execution Environment: Default EE"
          - "✅ Project: Demo Playbooks"
          - "✅ Inventory: Managed Infrastructure (2 hosts)"
          - "✅ Job Templates: 3 essential templates"
          - ""
          - "🎯 Ready for Testing:"
          - "1. Login to {{ controller_host }}"
          - "2. Navigate to Templates"
          - "3. Run 'Ping All Managed Nodes'"
          - "4. Test other job templates"
          - ""
          - "💡 Next Steps:"
          - "- Create custom playbooks in your own Git repository"
          - "- Add projects pointing to your playbooks"
          - "- Create job templates for your automation tasks"
          - "- Set up schedules for recurring jobs"

  rescue:
    - name: Display error information
      ansible.builtin.debug:
        msg:
          - "=== AAP Controller Setup Failed ==="
          - "This setup encountered an error."
          - ""
          - "Quick troubleshooting:"
          - "1. Verify AAP is running: curl -k {{ controller_host }}/api/v2/ping/"
          - "2. Check credentials are correct"
          - "3. Ensure SSH key exists: ls -la ./keys/bastion_managed_key"
          - "4. Test manual login to AAP web interface"
          - ""
          - "For more help, check the AAP web interface logs"

    - name: Fail with simple error message
      ansible.builtin.fail:
        msg: "AAP Controller provisioning failed. See troubleshooting steps above."