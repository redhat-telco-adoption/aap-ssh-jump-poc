---
# AAP Controller Provisioning Playbook
# This playbook provides idempotent, production-ready AAP Controller configuration
# 
# Usage:
#   ansible-playbook provision_aap_controller.yml -e @vars/aap_controller_vars.yml
#   ansible-playbook provision_aap_controller.yml -e @vars/environments/production.yml

- name: Provision AAP Controller Configuration
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/defaults.yml
  vars:
    # Connection settings with better defaults
    controller_host: "{{ aap_public_url | default(lookup('env', 'CONTROLLER_HOST')) | default('https://localhost') }}"
    controller_username: "{{ aap_admin_user | default(lookup('env', 'CONTROLLER_USERNAME')) | default('admin') }}"
    controller_password: "{{ aap_admin_password | default(lookup('env', 'CONTROLLER_PASSWORD')) | default('changeme') }}"
    controller_verify_ssl: "{{ aap_verify_ssl | default(true if 'production' in (environment | default('dev')) else false) }}"
    
    # Dynamic environment detection
    environment: "{{ environment | default('development') }}"
    organization_name: "{{ organizations[environment].name | default('Default') }}"
    
    # Enhanced error handling
    max_retries: 3
    retry_delay: 5

  pre_tasks:
    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - controller_host is defined
          - controller_username is defined  
          - controller_password is defined
          - controller_host | regex_search('^https?://')
        fail_msg: "Missing or invalid required variables. Check your configuration."

    - name: Test AAP Controller connectivity
      ansible.builtin.uri:
        url: "{{ controller_host }}/api/v2/ping/"
        validate_certs: "{{ controller_verify_ssl }}"
        timeout: 10
      register: ping_result
      retries: "{{ max_retries }}"
      delay: "{{ retry_delay }}"
      until: ping_result.status == 200

    - name: Display environment information
      ansible.builtin.debug:
        msg:
          - "Environment: {{ environment }}"
          - "Controller: {{ controller_host }}"
          - "Organization: {{ organization_name }}"
          - "SSL Verification: {{ controller_verify_ssl }}"

  tasks:
    # ===========================================
    # ORGANIZATION MANAGEMENT
    # ===========================================
    
    - name: Create/update organization
      ansible.controller.organization:
        name: "{{ organization_name }}"
        description: "{{ organizations[environment].description | default('AAP Organization for ' + environment) }}"
        max_hosts: "{{ organizations[environment].max_hosts | default(0) }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      when: organization_name != "Default"

    # ===========================================
    # TEAMS AND USERS (if specified)
    # ===========================================
    
    - name: Create teams
      ansible.controller.team:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        organization: "{{ organization_name }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ teams | default([]) }}"
      tags: teams

    # ===========================================
    # CREDENTIALS WITH VALIDATION
    # ===========================================
    
    - name: Verify SSH key file exists
      ansible.builtin.stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_stat
      vars:
        ssh_key_path: "{{ ops_ssh_key | default('./keys/bastion_managed_key') }}"

    - name: Create SSH credential for managed nodes
      ansible.controller.credential:
        name: "{{ credentials.managed_nodes.name }}"
        description: "{{ credentials.managed_nodes.description }}"
        organization: "{{ organization_name }}"
        credential_type: "Machine"
        inputs:
          username: "{{ credentials.managed_nodes.username }}"
          ssh_key_data: "{{ lookup('file', ssh_key_path) }}"
          ssh_key_unlock: ""
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      vars:
        ssh_key_path: "{{ ops_ssh_key | default('./keys/bastion_managed_key') }}"
      when: ssh_key_stat.stat.exists

    - name: Create vault credential (if vault password provided)
      ansible.controller.credential:
        name: "Vault Credential"
        description: "Ansible Vault credential for encrypted variables"
        organization: "{{ organization_name }}"
        credential_type: "Vault"
        inputs:
          vault_password: "{{ vault_password }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      when: vault_password is defined
      no_log: true

    # ===========================================
    # EXECUTION ENVIRONMENTS
    # ===========================================
    
    - name: Create execution environments
      ansible.controller.execution_environment:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        image: "{{ item.image }}"
        pull: "{{ item.pull | default('missing') }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ execution_environments }}"
      tags: execution_environments

    # ===========================================
    # PROJECTS WITH GIT VALIDATION
    # ===========================================
    
    - name: Validate Git repositories accessibility
      ansible.builtin.uri:
        url: "{{ item.scm_url.replace('.git', '') if item.scm_url.endswith('.git') else item.scm_url }}"
        method: HEAD
        timeout: 10
      loop: "{{ projects }}"
      when: 
        - item.scm_type == "git"
        - not item.scm_url.startswith('git@')  # Skip SSH URLs
      ignore_errors: true
      register: git_validation

    - name: Create projects
      ansible.controller.project:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        organization: "{{ organization_name }}"
        scm_type: "{{ item.scm_type }}"
        scm_url: "{{ item.scm_url }}"
        scm_branch: "{{ item.scm_branch | default('main') }}"
        scm_clean: "{{ item.scm_clean | default(true) }}"
        scm_delete_on_update: "{{ item.scm_delete_on_update | default(false) }}"
        scm_update_on_launch: "{{ item.scm_update_on_launch | default(true) }}"
        scm_update_cache_timeout: "{{ item.scm_update_cache_timeout | default(300) }}"
        credential: "{{ item.credential | default(omit) }}"
        timeout: "{{ item.timeout | default(600) }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ projects }}"
      register: project_creation
      retries: 2
      delay: 30
      until: project_creation is succeeded

    # ===========================================
    # INVENTORIES WITH DYNAMIC HOSTS
    # ===========================================
    
    - name: Create inventories
      ansible.controller.inventory:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        organization: "{{ organization_name }}"
        variables: "{{ item.variables | default({}) }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ inventories }}"

    - name: Create inventory groups
      ansible.controller.group:
        name: "{{ item.1.name }}"
        description: "{{ item.1.description | default('') }}"
        inventory: "{{ item.0.name }}"
        variables: "{{ item.1.variables | default({}) }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      with_subelements:
        - "{{ inventories }}"
        - groups
        - skip_missing: true

    # Dynamic host creation from Terraform state or inventory
    - name: Add hosts from managed_nodes group (if available)
      ansible.controller.host:
        name: "{{ hostvars[item]['inventory_hostname'] | default(item) }}"
        description: "Managed node {{ item }}"
        inventory: "{{ inventory_name }}"
        variables:
          ansible_host: "{{ hostvars[item]['ansible_host'] | default(hostvars[item]['private_ip']) }}"
          ansible_user: "{{ managed_node_user | default('ec2-user') }}"
          ansible_ssh_common_args: "{{ managed_ssh_args }}"
        groups: "{{ managed_node_groups }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ groups['managed_nodes'] | default([]) }}"
      vars:
        inventory_name: "{{ inventories | selectattr('name', 'equalto', 'Managed Infrastructure') | map(attribute='name') | first }}"
        managed_ssh_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyJump=ec2-user@{{ jump_host_ip }}"
        managed_node_groups: ["managed_environment"]
      when: 
        - groups['managed_nodes'] is defined
        - groups['managed_nodes'] | length > 0

    # ===========================================
    # JOB TEMPLATES WITH ENHANCED CONFIGURATION
    # ===========================================
    
    - name: Create job templates
      ansible.controller.job_template:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        organization: "{{ organization_name }}"
        project: "{{ item.project }}"
        playbook: "{{ item.playbook }}"
        inventory: "{{ item.inventory }}"
        credentials: "{{ item.credentials | default([]) }}"
        execution_environment: "{{ item.execution_environment | default(omit) }}"
        job_type: "{{ item.job_type | default('run') }}"
        verbosity: "{{ item.verbosity | default(1) }}"
        timeout: "{{ item.timeout | default(600) }}"
        become_enabled: "{{ item.become_enabled | default(false) }}"
        allow_simultaneous: "{{ item.allow_simultaneous | default(false) }}"
        ask_limit_on_launch: "{{ item.ask_limit_on_launch | default(false) }}"
        ask_variables_on_launch: "{{ item.ask_variables_on_launch | default(false) }}"
        ask_tags_on_launch: "{{ item.ask_tags_on_launch | default(false) }}"
        extra_vars: "{{ item.extra_vars | default({}) }}"
        job_tags: "{{ item.job_tags | default('') }}"
        skip_tags: "{{ item.skip_tags | default('') }}"
        survey_enabled: "{{ item.survey_enabled | default(false) }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ job_templates }}"
      tags: job_templates

    # ===========================================
    # WORKFLOW TEMPLATES
    # ===========================================
    
    - name: Create workflow job templates
      ansible.controller.workflow_job_template:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        organization: "{{ organization_name }}"
        survey_enabled: "{{ item.survey_enabled | default(false) }}"
        ask_variables_on_launch: "{{ item.ask_variables_on_launch | default(false) }}"
        extra_vars: "{{ item.extra_vars | default({}) }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ workflow_templates | default([]) }}"
      register: workflow_creation

    # ===========================================
    # NOTIFICATIONS
    # ===========================================
    
    - name: Create notification templates
      ansible.controller.notification_template:
        name: "{{ item.name }}"
        description: "{{ item.description | default('') }}"
        organization: "{{ organization_name }}"
        notification_type: "{{ item.type }}"
        notification_configuration: "{{ item.configuration }}"
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
        state: present
      loop: "{{ notification_templates | default([]) }}"
      when: item.configuration is defined
      tags: notifications

    # ===========================================
    # VALIDATION AND TESTING
    # ===========================================
    
    - name: Wait for project sync completion
      ansible.controller.project:
        name: "{{ item.name }}"
        wait: true
        timeout: 300
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
      loop: "{{ projects }}"
      when: project_creation is changed

    - name: Run validation job (if enabled)
      ansible.controller.job_launch:
        job_template: "{{ validation_job_template }}"
        wait: true
        timeout: 300
        controller_host: "{{ controller_host }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: "{{ controller_verify_ssl }}"
      register: validation_result
      when: 
        - run_validation | default(true)
        - validation_job_template is defined

  post_tasks:
    - name: Display provisioning summary
      ansible.builtin.debug:
        msg:
          - "=== AAP Controller Provisioning Summary ==="
          - "Environment: {{ environment }}"
          - "Controller URL: {{ controller_host }}"
          - "Organization: {{ organization_name }}"
          - "Projects created: {{ projects | length }}"
          - "Job templates created: {{ job_templates | length }}"
          - "Workflows created: {{ workflow_templates | default([]) | length }}"
          - ""
          - "Validation job: {{ 'PASSED' if validation_result.status | default('') == 'successful' else 'SKIPPED' }}"
          - ""
          - "Next steps:"
          - "1. Review created resources in AAP Controller UI"
          - "2. Test job templates manually"
          - "3. Configure additional RBAC if needed"
          - "4. Set up monitoring and alerting"

  rescue:
    - name: Display detailed error information
      ansible.builtin.debug:
        msg:
          - "=== AAP Controller Provisioning FAILED ==="
          - "Error occurred during provisioning"
          - "Environment: {{ environment | default('unknown') }}"
          - "Controller: {{ controller_host | default('unknown') }}"
          - ""
          - "Common troubleshooting steps:"
          - "1. Verify controller connectivity: curl -k {{ controller_host }}/api/v2/ping/"
          - "2. Check credentials are correct"
          - "3. Ensure ansible.controller collection is installed"
          - "4. Verify SSL certificate settings"
          - "5. Check network connectivity and firewall rules"

    - name: Fail with error context
      ansible.builtin.fail:
        msg: "AAP Controller provisioning failed. See debug output above for details."