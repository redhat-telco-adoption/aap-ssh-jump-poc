# templates/transfer_aap_bundle.tpl
---
# Transfer AAP Installation Bundle and Inventory
# This playbook transfers the AAP installation files to the AAP host
# Generated by Terraform on ${timestamp()}

- name: Transfer AAP installation files to AAP host
  hosts: ${name_prefix}-aap
  gather_facts: false
  vars:
    local_ansible_dir: "{{ playbook_dir }}/../ansible"
    remote_install_dir: "/tmp/aap_install"
    
  tasks:
    - name: Create remote installation directory
      ansible.builtin.file:
        path: "{{ remote_install_dir }}"
        state: directory
        mode: '0755'
      become: true

    - name: Transfer AAP installation inventory
      ansible.builtin.copy:
        src: "{{ local_ansible_dir }}/aap_install_inventory"
        dest: "{{ remote_install_dir }}/aap_install_inventory"
        mode: '0600'
        backup: true
      become: true

    - name: Find AAP bundle file locally
      ansible.builtin.find:
        paths: "{{ local_ansible_dir }}"
        patterns: "ansible-automation-platform-setup-bundle-*.tar.gz"
      delegate_to: localhost
      register: aap_bundle_files

    - name: Fail if no AAP bundle found
      ansible.builtin.fail:
        msg: |
          No AAP bundle found in {{ local_ansible_dir }}
          Please download the AAP 2.5 setup bundle from Red Hat Customer Portal
          and place it in the ansible/ directory.
      when: aap_bundle_files.files | length == 0

    - name: Display found bundle
      ansible.builtin.debug:
        msg: "Found AAP bundle: {{ aap_bundle_files.files[0].path }}"

    - name: Transfer AAP bundle
      ansible.builtin.copy:
        src: "{{ aap_bundle_files.files[0].path }}"
        dest: "{{ remote_install_dir }}/{{ aap_bundle_files.files[0].path | basename }}"
        mode: '0644'
      become: true
      register: bundle_transfer

    - name: Create installation script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # AAP Installation Script
          # Generated by Terraform
          
          set -e
          
          INSTALL_DIR="{{ remote_install_dir }}"
          BUNDLE_FILE="{{ aap_bundle_files.files[0].path | basename }}"
          
          echo "Starting AAP installation process..."
          echo "Working directory: $INSTALL_DIR"
          echo "Bundle file: $BUNDLE_FILE"
          
          cd "$INSTALL_DIR"
          
          # Extract bundle
          echo "Extracting AAP bundle..."
          tar -xzf "$BUNDLE_FILE"
          
          # Find extracted directory
          EXTRACTED_DIR=$(find . -maxdepth 1 -name "ansible-automation-platform-setup-bundle-*" -type d | head -1)
          
          if [ -z "$EXTRACTED_DIR" ]; then
            echo "ERROR: Could not find extracted AAP directory"
            exit 1
          fi
          
          echo "Extracted to: $EXTRACTED_DIR"
          
          # Copy inventory file
          echo "Copying installation inventory..."
          cp aap_install_inventory "$EXTRACTED_DIR/inventory"
          
          # Make sure we have proper permissions
          chmod 644 "$EXTRACTED_DIR/inventory"
          
          echo "Installation files prepared successfully!"
          echo ""
          echo "To complete AAP installation:"
          echo "  cd $INSTALL_DIR/$EXTRACTED_DIR"
          echo "  sudo ./setup.sh"
          echo ""
          echo "After installation, access AAP at: https://${aap_fqdn}"
          echo "Login with username: admin"
          echo "Default password is in the inventory file"
          
        dest: "{{ remote_install_dir }}/install_aap.sh"
        mode: '0755'
      become: true

    - name: Display installation instructions
      ansible.builtin.debug:
        msg:
          - "=== AAP Installation Files Transfer Complete ==="
          - ""
          - "Files transferred to: {{ remote_install_dir }}"
          - "  - aap_install_inventory (installation inventory)"
          - "  - {{ aap_bundle_files.files[0].path | basename }} (AAP bundle)"
          - "  - install_aap.sh (installation script)"
          - ""
          - "To complete AAP installation:"
          - "  1. SSH to AAP host: ssh -F inventory/ssh_config aap"
          - "  2. Run preparation script: sudo {{ remote_install_dir }}/install_aap.sh"
          - "  3. Navigate to extracted directory"
          - "  4. Run installer: sudo ./setup.sh"
          - ""
          - "AAP will be accessible at: https://${aap_fqdn}"
          - "Default admin password is configured in the inventory file"

- name: Verify AAP host readiness
  hosts: ${name_prefix}-aap
  gather_facts: true
  tasks:
    - name: Check system requirements
      ansible.builtin.debug:
        msg:
          - "=== AAP Host System Check ==="
          - "Hostname: {{ ansible_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Kernel: {{ ansible_kernel }}"
          - "CPU Cores: {{ ansible_processor_vcpus }}"
          - "Memory: {{ (ansible_memtotal_mb / 1024) | round(1) }} GB"
          - "Architecture: {{ ansible_architecture }}"
          - "Free Space: {{ (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available | human_readable }}"

    - name: Check if AAP is already installed
      ansible.builtin.stat:
        path: /opt/ansible-automation-platform
      register: aap_installed

    - name: Warning if AAP already installed
      ansible.builtin.debug:
        msg:
          - "WARNING: AAP appears to already be installed on this system"
          - "Installation directory exists: /opt/ansible-automation-platform"
          - "Please verify before proceeding with installation"
      when: aap_installed.stat.exists

    - name: Check execution node connectivity
      ansible.builtin.wait_for:
        host: "${exec_private_ip}"
        port: 22
        timeout: 10
      register: exec_connectivity
      ignore_errors: true

    - name: Display execution node status
      ansible.builtin.debug:
        msg: "Execution node (${exec_private_ip}): {{ 'Reachable' if exec_connectivity is succeeded else 'Not reachable' }}"